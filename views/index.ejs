<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script
      src="https://cdn.socket.io/4.5.0/socket.io.min.js"
      integrity="sha384-7EyYLQZgWBi67fBtVxw60/OWl1kjsfrPFcaU0pp0nAh+i8FD068QogUvg85Ewy1k"
      crossorigin="anonymous"
    ></script>
    <link rel="stylesheet" type="text/css" href="/static/css/index.css" />
  </head>
  <body>
    <div class="user">
      <!-- onsubmit="return false - 폼의 강제 전송을 막는다. -->
      <form id="user_form" onsubmit="return false">
        닉네임 <input type="text" name="id" id="user_id" />
        <button id="user_btn" type="button" onclick="chatbox_in()">입장</button>
        <div class="allUser"></div>
      </form>
      <button id="user_out" type="button" onclick="user_out()">나가기</button>
    </div>
    <div class="wrap">
      <div class="main">
        <div class="chat_box"><div id="text">채팅</div></div>
        <div class="chat">
          <form id="chat_form" onsubmit="return false">
            <input type="text" id="chat_input" />
            <button id="chat_btn" type="button" onclick="chat_submit()">
              입력
            </button>
          </form>
        </div>
      </div>
      <div class="userlist">
        <div id="userText">참여 유저</div>
      </div>
    </div>
  </body>
  <script>
    const socket = io.connect();
    const chat_box = document.querySelector(".chat_box");

    // 유저 입장
    const user_input = document.querySelector("#user_id");
    const wrap = document.querySelector(".wrap");
    const userlist = document.querySelector(".userlist");
    const userBtn = document.querySelector("#user_btn");
    const userOutBtn = document.querySelector("#user_out");
    function chatbox_in() {
      const user_id = user_input.value;
      if (user_id.length == 0) {
        alert("닉네임을 입력해주세요.");
        event.preventDefault();
      } else {
        socket.emit("userIn", user_id);
        socketEvent1();
      }
    }
    socket.on("idError", (msg) => {
      alert(msg);
      wrap.style = "display:none";
    });
    socket.on("idSuccess", (msg) => {
      wrap.style = "display:flex";
      alert(msg);
      user_input.setAttribute("readonly", "readonly");
      user_input.style = "background-color:gray";
      userBtn.style = "display: none";
      userOutBtn.style = "display: block";
    });
    // 입장이 된 이후에 쓰이는 이벤트
    function socketEvent1() {
      socket.on("noticeIn", (id) => {
        const div = document.createElement("div");
        div.innerText = `-- ${id} 님 입장 ! KINㄱㅓ운 ㅊH팅되ㅅㅔ요 ! !  --`;
        div.classList.add("noticeIn");
        chat_box.append(div);
        chat_box.scrollTo(0, chat_box.scrollHeight);
      });
    }

    socket.on("allUserIn", (data) => {
      const div = document.querySelector(".allUser");
      const userlist = document.querySelector(".userlist");
      const user_id = user_input.value;
      const allUser = document.createElement("div");

      div.innerHTML = `<div>현재 인원 : ${Object.values(data).length}명</div>`;

      for (var i = 0; i < Object.values(data).length; i++) {
        if (user_id == Object.values(data)[i]) {
          allUser.innerHTML = `<p>${Object.values(data)[i]}</p>`;
        } else if (user_id != Object.values(data)[i]) {
          allUser.innerHTML = `<p><span>${
            Object.values(data)[i]
          }</span><button class="dmBtn" type="button" id=${
            Object.keys(data)[i]
          } onclick="dm(this)">귓속말</button></p>`;
        }
        userlist.append(allUser);
      }
    });

    // 유저 나감
    function user_out() {
      const user_id = user_input.value;
      socket.emit("userOut", user_id);
      userBtn.style = "display: block";
      userOutBtn.style = "display: none";
      user_input.removeAttribute("readonly");
      user_input.style = "background-color:darkblue";
      wrap.style = "display:none";
    }
    socket.on("noticeOut", (id) => {
      var div = document.createElement("div");
      div.innerText = `-- ${id} 님이 ㄴrㄱr셨습ㄴㅣㄷr ㅠ . ㅠ --`;
      div.classList.add("noticeOut");
      chat_box.append(div);

      for (let i = 3; i < userlist.childNodes.length; i++) {
        if (userlist.childNodes[i].innerText == id + "전송") {
          userlist.childNodes[i].remove();
        }
      }
      chat_box.scrollTo(0, chat_box.scrollHeight);
    });
    socket.on("userDisconnect", (id) => {
      if (id == null) {
        event.preventDefault();
      } else {
        var div = document.createElement("div");
        div.innerText = `-- ${id} 님이 ㄴrㄱr셨습ㄴㅣㄷr ㅠ . ㅠ --`;
        div.classList.add("noticeOut");
        chat_box.append(div);
      }

      for (let i = 3; i < userlist.childNodes.length; i++) {
        if (userlist.childNodes[i].innerText == id + "전송") {
          userlist.childNodes[i].remove();
        }
      }
      chat_box.scrollTo(0, chat_box.scrollHeight);
    });

    // DM 닉네임 추가 기능
    function dm(e) {
      const selectBtn = e;
      const dmId = e.parentNode.firstChild.innerText;
      const anotherBtn = e.parentNode.getElementsByClassName("dmbtn");
      console.log(anotherBtn);
      if (selectBtn.innerText == "귓속말") {
        selectBtn.innerText = "끄기";
        selectBtn.classList.add("dmOn");
        chat_input.setAttribute("placeholder", dmId);
      } else if (selectBtn.innerText == "끄기") {
        selectBtn.innerText = "귓속말";
        selectBtn.classList.remove("dmOn");
        chat_input.removeAttribute("placeholder");
      }
      return e;
    }
    // 채팅 전송
    const chat_input = document.querySelector("#chat_input");
    var dmOn = userlist.getElementsByClassName("dmOn");
    function chat_submit() {
      const user_id = user_input.value;
      var msgInput = chat_input;
      var myMsg = chat_input.value;
      if (myMsg.length == 0) {
        alert("채팅을 입력해주세요.");
        return false;
      } else {
        if (dmOn[0] == undefined) {
          socket.emit("sendMsg", {
            id: user_id,
            msg: myMsg,
          });
        } else if (dmOn[0].className == "dmBtn dmOn") {
          var dm = dmOn[0].getAttribute("id");
          socket.emit("sendMsg", {
            id: user_id,
            msg: myMsg,
            dm: dm,
          });
        }
      }
      myMsg.null;
      chat_box.scrollTo(0, chat_box.scrollHeight);
    }
    socket.on("send", (data) => {
      console.log(data);
      const user_id = user_input.value;
      var msgInput = chat_input;
      var myMsg = chat_input.value;
      var div = document.createElement("div");
      if (user_id == data.id) {
        // 채팅 전송 my
        div.classList.add("myMsg");
        console.log("1");
      } else if (user_id != data.id) {
        // 채팅 전송 another
        div.classList.add("anotherMsg");
      }

      if (data.dm) {
        div.classList.add("directMsg");
        div.textContent = data.dm;
      }
      div.innerHTML += `<div>[${data.id}] ${data.msg}</div>`;
      chat_box.append(div);
      chat_box.scrollTo(0, chat_box.scrollHeight);
    });
  </script>
</html>
